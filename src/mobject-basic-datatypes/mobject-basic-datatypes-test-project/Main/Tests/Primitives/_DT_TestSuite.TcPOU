<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_DT_TestSuite" Id="{3bf06424-db41-4e96-989f-3b122c7607ca}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _DT_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{2198f0b4-6e44-4edf-8ac2-3e763a0230df}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{7d77cc75-b516-41f9-b5e9-a62b4c8324d4}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : DT := DT#1970-1-1-0:0:0;
    expected : DT := DT#1970-1-1-0:0:0;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := DT#2024-12-31-12:34:56;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{5e265d59-6793-47ed-8e77-b582d96db3a2}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{e3b0e225-62cf-4c70-9602-6ba2c15b8965}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : DT := DT#1970-1-1-0:0:0;
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := DT#2024-12-31-12:34:56;

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{7219f3eb-611e-49b7-b562-fac18256f5a1}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : DT := DT#1970-1-1-0:0:0;
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := DT#2024-12-31-12:34:56;

actual := target;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{7e775abf-0a15-4221-9394-93e29d906123}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
    serializer : JsonSerializer;
    expected : STRING := '{"typeName":"DT"}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{279e6ffa-3562-430b-8cb2-fc18a2289f32}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
    serializer : JsonSerializer;
    expected : STRING := '"2024-12-31T12:34:56"';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{655c7208-7ed4-482c-b94d-5794704eea5c}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
    expected : UDINT := SIZEOF(DT);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{1868273d-8b35-43ae-be91-cb0c4d828740}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '"2024-12-31T12:34:56"';
    _type : _DT(DT#1970-1-1-0:0:0);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{df9a4634-919d-4d7d-96b2-8d2837b21340}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : _DT(DT#1970-1-1-0:0:0);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := DT#2024-12-31-12:34:56;

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{8efcc0c3-d918-4d37-bab8-565e26ef4280}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : _DT(DT#1970-1-1-0:0:0);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := DT#2024-12-31-12:34:56;

actual := target.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{61ea1d59-5916-4582-a297-96a08ad20f5a}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
    expected : STRING := 'DT';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{fb97cd57-262f-4fc7-b00d-90005b6463be}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := DT#2024-12-31-12:34:56;

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{1cca6bfa-a485-408e-8a0d-a88e0ebeb7bb}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>